apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-init
  labels:
    app.kubernetes.io/name: mongodb-init
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app.kubernetes.io/component: infra
    app.kubernetes.io/part-of: sausage-store
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "5"
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb-init
        app.kubernetes.io/instance: "{{ .Release.Name }}"
    spec:
      containers:
        - name: mongodb-init
          image: mongo:latest
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: MONGO_INITDB_ROOT_USERNAME
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secrets
                  key: MONGO_INITDB_ROOT_PASSWORD
            - name: MONGO_DB_USER
              valueFrom:
                secretKeyRef:
                  name: mongodb-secrets
                  key: MONGO_DB_USER
            - name: MONGO_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secrets
                  key: MONGO_DB_PASSWORD
          command:
            - sh
            - -c
            - |
              mongosh --host mongodb --port 27017 \
                -u "$MONGO_INITDB_ROOT_USERNAME" \
                -p "$MONGO_INITDB_ROOT_PASSWORD" \
                --authenticationDatabase admin \
                --eval "
                  db = db.getSiblingDB('reports');
                  db.createUser({
                    user: '$MONGO_DB_USER',
                    pwd: '$MONGO_DB_PASSWORD',
                    roles: [
                      { role: 'readWrite', db: 'reports' }
                    ]
                  });
                "
      restartPolicy: OnFailure
